"use strict";
var postcss = require("postcss");
var color_shorthand_hex_to_six_digit_1 = require("./lib/color-shorthand-hex-to-six-digit");
var replaceAll = require('string.prototype.replaceall');
module.exports = postcss.plugin('replace-values', function (options) {
    if (!options || !options.values) {
        throw new Error('Required options is missing');
    }
    var replaceCssVariables = typeof options.replaceCssVariables === 'undefined' ? true : options.replaceCssVariables;
    var replaceColors = options.values;
    var replaceColorsKeys = Object.keys(options.values);
    var checkMatching = function (replaceValue, search) {
        if (search.slice(0, 2) === '--') {
            return replaceValue === search || replaceValue.indexOf(search.replace(' ', '') + ")") !== -1;
        }
        return replaceValue.indexOf(search) !== -1;
    };
    return function (root) {
        root.walkDecls(function (decl) {
            replaceColorsKeys.some(function (checkColor) {
                var search = checkColor;
                var replaceValue = decl.value;
                if (/^#([0-9A-F]{3,4}){1,2}$/i.test(search)) {
                    search = color_shorthand_hex_to_six_digit_1.conv(search);
                    replaceValue = color_shorthand_hex_to_six_digit_1.conv(replaceValue);
                }
                if (checkMatching(replaceValue, search)) {
                    if (!replaceCssVariables && decl.prop.slice(0, 2) === '--') {
                        return;
                    }
                    var value = replaceColors[checkColor];
                    if (typeof value !== 'string') {
                        var selector = decl.parent.selector;
                        if (!new RegExp(value.selector).test(selector)) {
                            return;
                        }
                        value = value.value;
                    }
                    decl.value = replaceAll(replaceValue, search, value);
                }
            });
        });
    };
});
